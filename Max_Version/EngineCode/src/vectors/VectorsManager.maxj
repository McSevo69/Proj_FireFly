package vectors;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;

class VectorsManager extends CustomManager {
	
	private static int width = 2560, height = 1440, maxRadius = 4, burning = -2;

	VectorsManager(EngineParameters engineParameters) {
		super(engineParameters);

		KernelBlock kernel = addKernel(new VectorsKernel(makeKernelParameters("ForestFire"), width, height, maxRadius, burning));	

		kernel.getInput("inData") <== addStreamFromCPU("inData");
		addStreamToCPU("outData") <== kernel.getOutput("outData");
	}

	static EngineInterface interfaceDefault() {
	
		EngineInterface ei = new EngineInterface();
		InterfaceParam size = ei.addParam("dataSize", CPUTypes.UINT64);

		InterfaceParam windDir = ei.addParam("windDir", CPUTypes.UINT8);
		InterfaceParam windStrength = ei.addParam("windStrength", CPUTypes.UINT8);
		
		ei.setTicks("ForestFire", size);

		ei.setScalar("ForestFire", "windDir", windDir);
		ei.setScalar("ForestFire", "windStrength", windStrength);
		
		ei.setStream("inData", CPUTypes.UINT8, size * CPUTypes.INT32.sizeInBytes());	
		ei.setStream("outData", CPUTypes.UINT8, size * CPUTypes.INT32.sizeInBytes());

		return ei;

	}

	public static void main(String[] args) {
		EngineParameters params = new EngineParameters(args);
		VectorsManager manager = new VectorsManager(params);

		KernelConfiguration currKConf = manager.getCurrentKernelConfig();
		currKConf.optimization.setCEPipelining(2);
		
		manager.addMaxFileConstant("width", width);
		manager.addMaxFileConstant("height", height);
		manager.addMaxFileConstant("burning", burning);
		manager.createSLiCinterface(interfaceDefault());
		manager.build();
	}

}
