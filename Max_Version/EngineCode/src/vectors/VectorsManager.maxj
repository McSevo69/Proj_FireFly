package vectors;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration.OptimizationOptions.OptimizationTechnique;

class VectorsManager extends CustomManager {

	private static int width = 1920, height = 1080, maxRadius = 4, streamCnt = 4;
	private static int overlap = maxRadius * width + maxRadius;

	VectorsManager(EngineParameters engineParameters) {
		super(engineParameters);

		config.setDefaultStreamClockFrequency(120);

		KernelBlock kernel = addKernel(new VectorsKernel(makeKernelParameters("ForestFire"), width, height, maxRadius, overlap));

		for (int i=0; i<streamCnt; ++i) {
			kernel.getInput("inData" + i) <== addStreamFromCPU("inData" + i);
			addStreamToCPU("outData" + i) <== kernel.getOutput("outData" + i);
		}		
	}

	static EngineInterface interfaceDefault() {

		EngineInterface ei = new EngineInterface();
		InterfaceParam size = ei.addParam("dataSize", CPUTypes.UINT64);

		InterfaceParam windDir = ei.addParam("windDir", CPUTypes.INT8);
		InterfaceParam windStrength = ei.addParam("windStrength", CPUTypes.INT8);
		InterfaceParam burningState = ei.addParam("burningState", CPUTypes.INT8);
		//InterfaceParam minValue = ei.addParam("minValue", CPUTypes.INT8);

		ei.setTicks("ForestFire", size/streamCnt+2*overlap);

		ei.setScalar("ForestFire", "windDir", windDir);
		ei.setScalar("ForestFire", "windStrength", windStrength);
		ei.setScalar("ForestFire", "burningState", burningState);

		ei.setStream("inData0", CPUTypes.INT8, (overlap + size) * CPUTypes.INT8.sizeInBytes() / streamCnt);
		ei.setStream("inData1", CPUTypes.INT8, (2*overlap + size) * CPUTypes.INT8.sizeInBytes() / streamCnt);
		ei.setStream("inData2", CPUTypes.INT8, (2*overlap + size) * CPUTypes.INT8.sizeInBytes() / streamCnt);
		ei.setStream("inData3", CPUTypes.INT8, (overlap + size) * CPUTypes.INT8.sizeInBytes() / streamCnt);

		for (int i=0; i<streamCnt; ++i) 			
			ei.setStream("outData" + i, CPUTypes.INT8, size * CPUTypes.INT8.sizeInBytes() / streamCnt);
		
		return ei;
	}

	public static void main(String[] args) {
		EngineParameters params = new EngineParameters(args);
		VectorsManager manager = new VectorsManager(params);

		KernelConfiguration currKConf = manager.getCurrentKernelConfig();
		currKConf.optimization.setOptimizationTechnique(OptimizationTechnique.AREA);
		
		manager.addMaxFileConstant("width", width);
		manager.addMaxFileConstant("height", height);
		manager.addMaxFileConstant("maxRadius", maxRadius);
		manager.addMaxFileConstant("streamCnt", streamCnt);
		manager.createSLiCinterface(interfaceDefault());
		manager.build();
	}

}
