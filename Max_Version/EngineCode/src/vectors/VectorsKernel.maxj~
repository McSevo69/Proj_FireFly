package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;

class VectorsKernel extends Kernel {

	static final DFEType dataType=dfeUInt(8), floatType=dfeFloat(8,24);

	//number of 0,1 patterns
	DFEVar willBurn(DFEVar streamIn, DFEVar x, DFEVar y, int width, int height, DFEVar rand) {
						
		DFEVar cnt = (y - 1 >= 0) ? (stream.offset(streamIn, -width) > 2 ? constant.var(dataType, 1) : 
			constant.var(dataType, 0)) : constant.var(dataType, 0);
		cnt += (y - 1 >= 0 & x + 1 < width) ? (stream.offset(streamIn, -width + 1) > 2 ? constant.var(dataType, 1) : 0): 0;
		cnt += (x + 1 < width) ? (stream.offset(streamIn, +1) > 2 ? constant.var(dataType, 1) : 0): 0;
		cnt += (y + 1 < height & x + 1 < width) ? (stream.offset(streamIn, +width +1) > 2 ? constant.var(dataType, 1) : 0): 0;
		cnt += (y + 1 < height) ? (stream.offset(streamIn, +width) > 2 ? constant.var(dataType, 1) : 0): 0;
		cnt += (y + 1 < height & x - 1 >= 0) ? (stream.offset(streamIn, +width -1) > 2 ? constant.var(dataType, 1) : 0): 0;
		cnt += (x - 1 >= 0) ? (stream.offset(streamIn, -1) > 2 ? constant.var(dataType, 1) : 0): 0;
		cnt += (y - 1 >= 0 & x - 1 >= 0) ? (stream.offset(streamIn, -width -1) > 2 ? constant.var(dataType, 1) : 0): 0;
		
		return (cnt >= 1 | io.scalarInput("prop_f", floatType) > Math.random()) ?
			io.scalarInput("t", dataType) : constant.var(dataType, 0);
	}

	DFEVar willGrow(DFEVar rand) {
		return (io.scalarInput("prop_p", floatType) > Math.random()) ? 
			constant.var(dataType, 0) : constant.var(dataType, 1);
	}
 
	DFEVar getNewCellState(DFEVar streamIn, DFEVar x, DFEVar y, int width, int height, DFEVar rand) {

		DFEVar state = (streamIn > 2) ? constant.var(dfeUInt(2), 2) : streamIn.cast(dfeUInt(2));

		return control.mux(state,
				willBurn(streamIn, x, y, width, height, rand),
				willGrow(rand),
				streamIn - 1);
	}

	VectorsKernel(KernelParameters parameters, int width, int height) {
		super(parameters);

		// Input
		DFEVar streamIn = io.input("inData", dataType);
		DFEVar rand = io.input("inRandom", floatType);		
		
		//counters
		CounterChain chain = control.count.makeCounterChain();
		DFEVar y_cnt = chain.addCounter(height, 1);
		DFEVar x_cnt = chain.addCounter(width, 1);

		y_cnt = y_cnt.cast(dfeUInt(32));
		x_cnt = x_cnt.cast(dfeUInt(32));
				
		//Output
		io.output("outData", getNewCellState(streamIn, x_cnt, y_cnt, width, height, rand), dataType);
				
	}
}
